<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Commands on Cooklang: recipe markup language</title><link>/cli/commands/</link><description>Recent content in Commands on Cooklang: recipe markup language</description><generator>Hugo</generator><language>en-ie</language><lastBuildDate>Thu, 04 Sep 2025 09:36:55 +0000</lastBuildDate><atom:link href="/cli/commands/index.xml" rel="self" type="application/rss+xml"/><item><title>Recipe</title><link>/cli/commands/recipe/</link><pubDate>Thu, 04 Sep 2025 09:36:55 +0000</pubDate><guid>/cli/commands/recipe/</guid><description>&lt;p>The &lt;code>recipe&lt;/code> command parses and displays Cooklang recipe files. It's your primary tool for viewing recipes, validating syntax, and converting between formats.&lt;/p>
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook recipe &amp;amp;#34;Neapolitan Pizza.cook&amp;amp;#34;&lt;/code>&lt;/pre>
&lt;/div>&lt;p>File extension is optional, that works too:&lt;/p>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook recipe &amp;amp;#34;Neapolitan Pizza&amp;amp;#34;&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This displays the recipe in a human-readable format with ingredients, steps, and metadata clearly organized.&lt;/p>
&lt;h2 id="menu-files">Menu Files&lt;/h2>
&lt;p>CookCLI also supports &lt;code>.menu&lt;/code> files for meal planning. Menu files can reference multiple recipes and organize them by meals or days:&lt;/p></description></item><item><title>Shopping List</title><link>/cli/commands/shopping-list/</link><pubDate>Thu, 04 Sep 2025 09:36:55 +0000</pubDate><guid>/cli/commands/shopping-list/</guid><description>&lt;p>The &lt;code>shopping-list&lt;/code> command creates organized shopping lists from one or more recipes. It automatically combines ingredients, converts units (some day!), and groups items by store section.&lt;/p>
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook shopping-list &amp;amp;#34;Pasta.cook&amp;amp;#34; &amp;amp;#34;Salad.cook&amp;amp;#34;&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This creates a combined shopping list with all ingredients from both recipes.&lt;/p>
&lt;h2 id="creating-shopping-lists">Creating Shopping Lists&lt;/h2>
&lt;h3 id="single-recipe">Single Recipe&lt;/h3>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook shopping-list &amp;amp;#34;Breakfast/Easy Pancakes&amp;amp;#34; &amp;amp;#34;Neapolitan Pizza&amp;amp;#34;&lt;/code>&lt;/pre>
&lt;/div>&lt;p>Output:&lt;/p>


&lt;div class="code-toolbar">
 &lt;pre class="language-" data-language="">&lt;code class="language-">[dried herbs and spices]
salt 24.6 g
sea salt 1 pinch

[milk and dairy]
eggs 3

[oils and dressings]
oil
olive oil 1 drizzle

[other]
San Marzano tomato sauce 5 tbsp
basil leaves
mozzarella cheese 100 grams
semolina&lt;/code>&lt;/pre>
&lt;/div>&lt;h3 id="multiple-recipes">Multiple Recipes&lt;/h3>
&lt;p>Combine ingredients from several recipes:&lt;/p></description></item><item><title>Server</title><link>/cli/commands/server/</link><pubDate>Thu, 04 Sep 2025 09:36:55 +0000</pubDate><guid>/cli/commands/server/</guid><description>&lt;p>The &lt;code>server&lt;/code> command starts a local web server that makes your recipe collection browsable from any device with a web browser. It's perfect for cooking from a tablet, sharing recipes with family, or browsing your collection comfortably.&lt;/p>
&lt;img width="1166" height="995" alt="Screenshot 2025-08-28 at 16 47 49" src="https://github.com/user-attachments/assets/73ec0a6d-f2dc-4fcc-b54b-5622e0532df3" />
&lt;img width="1175" height="935" alt="Screenshot 2025-08-28 at 16 47 56" src="https://github.com/user-attachments/assets/fdbfc722-cdec-401a-a9ac-6ff2bba4b7c5" />
&lt;img width="1276" height="866" alt="Screenshot 2025-08-28 at 16 49 20" src="https://github.com/user-attachments/assets/8e6c0ffa-0957-4769-9268-beae8efdea7a" />
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook server&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This starts a web server on &lt;code>http://localhost:9080&lt;/code> serving recipes from the current directory.&lt;/p></description></item><item><title>Search</title><link>/cli/commands/search/</link><pubDate>Thu, 04 Sep 2025 09:36:55 +0000</pubDate><guid>/cli/commands/search/</guid><description>&lt;p>The &lt;code>search&lt;/code> command helps you find recipes quickly by searching through titles, ingredients, instructions, and metadata. It's perfect for answering &amp;quot;what can I cook with what I have?&amp;quot; or finding that recipe you remember but can't locate.&lt;/p>
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook search chicken&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This searches all recipes for the word &amp;quot;chicken&amp;quot; and returns matching recipes sorted by relevance.&lt;/p>
&lt;h2 id="search-basics">Search Basics&lt;/h2>
&lt;h3 id="single-term-search">Single Term Search&lt;/h3>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook search tomato&lt;/code>&lt;/pre>
&lt;/div>&lt;p>Output:&lt;/p>


&lt;div class="code-toolbar">
 &lt;pre class="language-" data-language="">&lt;code class="language-">Pasta with Tomato Sauce.cook
Tomato Soup.cook
Caprese Salad.cook
Pizza Margherita.cook&lt;/code>&lt;/pre>
&lt;/div>&lt;h3 id="multiple-terms">Multiple Terms&lt;/h3>
&lt;p>All terms must match (AND logic):&lt;/p></description></item><item><title>Import</title><link>/cli/commands/import/</link><pubDate>Thu, 04 Sep 2025 09:36:55 +0000</pubDate><guid>/cli/commands/import/</guid><description>&lt;p>The &lt;code>import&lt;/code> command fetches recipes from websites and automatically converts them to Cooklang format. It supports hundreds of popular recipe websites and extracts ingredients, instructions, and metadata intelligently.&lt;/p>
&lt;p>Requires &lt;code>OPENAI_API_KEY&lt;/code> environment variable set to perform the conversion to Cooklang. Without the key you still can downlad recipe original content, but it won't be converted to Cooklang.&lt;/p>
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook import https://www.bbcgoodfood.com/recipes/chicken-bacon-pasta&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This downloads the recipe and outputs it in Cooklang format into stdout.&lt;/p></description></item><item><title>Doctor</title><link>/cli/commands/doctor/</link><pubDate>Thu, 04 Sep 2025 09:36:55 +0000</pubDate><guid>/cli/commands/doctor/</guid><description>&lt;p>The &lt;code>doctor&lt;/code> command helps maintain a healthy recipe collection by checking for syntax errors, validating references, and ensuring proper organization. Think of it as a health check for your recipes.&lt;/p>
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook doctor&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This runs all available checks on your recipe collection and reports any issues found.&lt;/p>
&lt;h2 id="available-checks">Available Checks&lt;/h2>
&lt;h3 id="recipe-validation">Recipe Validation&lt;/h3>
&lt;p>Check all recipes for syntax errors and warnings:&lt;/p>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook doctor validate&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This command:&lt;/p>
&lt;ul>
&lt;li>Detects syntax errors that prevent parsing&lt;/li>
&lt;li>Reports warnings about potential issues&lt;/li>
&lt;li>Validates recipe references (when one recipe includes another)&lt;/li>
&lt;li>Checks for invalid units or quantities&lt;/li>
&lt;li>Identifies deprecated syntax&lt;/li>
&lt;/ul>
&lt;h3 id="aisle-configuration">Aisle Configuration&lt;/h3>
&lt;p>Check for ingredients missing from your aisle configuration:&lt;/p></description></item><item><title>Seed</title><link>/cli/commands/seed/</link><pubDate>Thu, 04 Sep 2025 09:36:55 +0000</pubDate><guid>/cli/commands/seed/</guid><description>&lt;p>The &lt;code>seed&lt;/code> command populates a directory with example Cooklang recipes. It's perfect for getting started, learning the syntax, or setting up a demo.&lt;/p>
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook seed&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This creates a collection of example recipes in the current directory.&lt;/p>
&lt;h2 id="what-gets-created">What Gets Created&lt;/h2>
&lt;p>The seed command creates:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Example recipes&lt;/strong> – Various cuisines and complexity levels&lt;/li>
&lt;li>&lt;strong>Organized folders&lt;/strong> – Structured by meal type&lt;/li>
&lt;li>&lt;strong>Configuration files&lt;/strong> – Including &lt;code>aisle.conf&lt;/code> for shopping lists&lt;/li>
&lt;li>&lt;strong>README&lt;/strong> – Documentation about the recipes&lt;/li>
&lt;/ul>


&lt;div class="code-toolbar">
 &lt;pre class="language-" data-language="">&lt;code class="language-">.
├── Breakfast/
│ ├── Easy Pancakes.cook
│ └── Mexican Style Burrito.cook
├── Dinners/
│ ├── Neapolitan Pizza.cook
│ ├── Pasta Carbonara.cook
│ └── Roast Chicken.cook
├── Shared/
│ ├── Pizza Dough.cook
│ ├── Tomato Sauce.cook
│ └── Guacamole.cook
├── config/
│ └── aisle.conf
└── README.md&lt;/code>&lt;/pre>
&lt;/div>&lt;h2 id="seeding-options">Seeding Options&lt;/h2>
&lt;h3 id="current-directory">Current Directory&lt;/h3>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook seed
# Creates recipes in current directory&lt;/code>&lt;/pre>
&lt;/div>&lt;h3 id="specific-directory">Specific Directory&lt;/h3>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook seed ~/my-recipes
# Creates recipes in ~/my-recipes

# Or
cook seed recipes/examples
# Creates recipes in recipes/examples&lt;/code>&lt;/pre>
&lt;/div>&lt;h3 id="creating-directory">Creating Directory&lt;/h3>
&lt;p>If the directory doesn't exist, it will be created:&lt;/p></description></item><item><title>Report</title><link>/cli/commands/report/</link><pubDate>Thu, 04 Sep 2025 09:36:55 +0000</pubDate><guid>/cli/commands/report/</guid><description>&lt;p>The &lt;code>report&lt;/code> command generates custom reports from recipes using minijinja templates. It's a powerful tool for creating recipe cards, nutrition labels, meal plans, or any custom format you need.&lt;/p>
&lt;p>⚠️ &lt;strong>Note&lt;/strong>: The report command is currently a prototype feature and will evolve in future versions.&lt;/p>
&lt;h2 id="basic-usage">Basic Usage&lt;/h2>


&lt;div class="code-toolbar">
 &lt;pre class="language-bash" data-language="bash">&lt;code class="language-bash">cook report -t template.jinja recipe.cook&lt;/code>&lt;/pre>
&lt;/div>&lt;p>This processes the recipe through the template and outputs the result.&lt;/p>
&lt;h2 id="how-it-works">How It Works&lt;/h2>
&lt;p>The report command:&lt;/p>
&lt;ol>
&lt;li>Parses the recipe file&lt;/li>
&lt;li>Applies any scaling&lt;/li>
&lt;li>Loads aisle and pantry configurations (if provided)&lt;/li>
&lt;li>Passes recipe data to the Jinja2 template&lt;/li>
&lt;li>Outputs the rendered result&lt;/li>
&lt;/ol>
&lt;h2 id="template-variables">Template Variables&lt;/h2>
&lt;p>Templates receive comprehensive recipe data:&lt;/p></description></item></channel></rss>